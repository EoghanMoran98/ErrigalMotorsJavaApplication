package ErrigalMotor;

/**
 * This class holds the methods used for interacting with the database throughout the program
 * @version 1.0
 * @author Team 3
 * @since 05/04/19
 */
import java.sql.*;

public class DatabaseConnection {
/**
 * Class variables 
 */
    static Connection conObj;
    static PreparedStatement ps;
    static ResultSet resultSet;
    static ResultSet resultSet2;
    static Statement stateObj;
    static ResultSet rsCars;
    static Connection carConObj;

    //set a value for maximum number of cars in order to create an array of this size 
    private final int MAX_CARS = 50;
    //this variable will hold the current number of records for a query (could be a class var) 
    public int numRecordsInQuery = 0;

    /**
     * Method to set connection to db using connection carConObj
     */
    public DatabaseConnection() {
        try {

            // Connection to DB 
            String conStr = "jdbc:ucanaccess://Errigal.accdb";

            carConObj = DriverManager.getConnection(conStr);
            System.out.println("Connection successful");

            stateObj = carConObj.createStatement();

        } catch (SQLException sqlex) {
            System.out.println(sqlex);
        }
    }//DatabaseConnection

    /**
     * Method to connect to database using connection conObj
     */
    public static void setConnection() {
        try {
            // Connection to DB 
            String conStr = "jdbc:ucanaccess://Errigal.accdb";
            // Class.forName(NAME);

            conObj = DriverManager.getConnection(conStr);
            System.out.println("Connection successful");

            stateObj = conObj.createStatement();

        } catch (SQLException sqlex) {
            System.out.println(sqlex);
        }
    }//setConnection

    
     /**
     * Method to close the connection to the database
     */
    public static void closeConnection() {
        try {
            conObj.close();
            stateObj.close();
        } catch (Exception ex) {
            System.out.println(ex.toString());
        }
        System.out.println("Successfully Disconnected");

    }//closeConnection

    
      /**
     * Method which adds an appointment to the database using a prepared statement.
     * @param registration
     * @param userID
     * @param doA
     * @param timeOfDay
     * @return 
     */
    public static boolean addAppt(String registration, int userID, Date doA, String timeOfDay) {
        boolean done = false;
        try {

            String query = "INSERT INTO tblAppointment (Registration, UserID, ApptDate, ApptTime) VALUES (?,?,?,?)";

            ps = conObj.prepareStatement(query);

            ps.setString(1, registration);
            ps.setInt(2, userID);
            ps.setDate(3, doA);
            ps.setString(4, timeOfDay);

            int result = ps.executeUpdate();
            if (result == 1) {
                done = true;
            }

        } catch (SQLException sqlex) {
            sqlex.printStackTrace();
        }

        return done;
    } // addAppt

    
    /**
     * Method which adds all the cars in the database to an array which can then be displayed 
     * in the stock form
     * @return 
     * 
     */
    public Stock[] getAllCars() {
        // instantiate an array of Car Objects to the MAX_CARS size 

        Stock[] carArray = new Stock[MAX_CARS];
        //reset counter for number of records in the query 
        numRecordsInQuery = 0;
        try {
            //prepare the SQL statement 
            String sqlString = "SELECT * FROM tblCar";
            //create a prepared statement  
            ps = carConObj.prepareStatement(sqlString);
            //execute the prepared statement and retrieve the results in the 
            //resultSet 
            rsCars = ps.executeQuery();

            //extract the data from resultSet into the carArray             
            //parse through the resultSet extracting the data             
            int index = 0;
            while (rsCars.next()) {
                //extract details from the cars.               
                String registration = rsCars.getString("Registration");
                String carBrand = rsCars.getString("CarBrand");
                String carModel = rsCars.getString("CarModel");
                double carPrice = rsCars.getDouble("CarPrice");
                String carFuelType = rsCars.getString("CarFuelType");
                double carEngineSize = rsCars.getDouble("CarEngineSize");
                double carFuelConsump = rsCars.getDouble("CarFuelConsump");
                int carMileage = rsCars.getInt("CarMileage");
                //instantiate a Student object with the data in the array                 
                carArray[index] = new Stock(registration, carBrand, carModel, carPrice, carFuelType, carEngineSize, carFuelConsump, carMileage);
                index++;
            } // while
            //keep a record of the number of records in this query             
            numRecordsInQuery = index;

        } // try
        catch (SQLException sqlex) {
            sqlex.printStackTrace();
            closeConnection();
        } // catch
        return carArray;

    }//getAllCars

    /**
     * Method for adding a new car to the database
     * @param registration
     * @param brand
     * @param model
     * @param price
     * @param fuelType
     * @param engineSize
     * @param fuelConsump
     * @param mileage
     * @return 
     */
    public boolean addNewCar(String registration, String brand, String model, double price,
            String fuelType, double engineSize, double fuelConsump,
            int mileage) {
        boolean done = false;
        try {
            setConnection();
            String query = "INSERT INTO tblCar (Registration, CarBrand, CarModel, CarPrice, CarFuelType, CarEngineSize, CarFuelConsump, CarMileage) VALUES (?,?,?,?,?,?,?,?)";

            ps = conObj.prepareStatement(query);

            ps.setString(1, registration);
            ps.setString(2, brand);
            ps.setString(3, model);
            ps.setDouble(4, price);
            ps.setString(5, fuelType);
            ps.setDouble(6, engineSize);
            ps.setDouble(7, fuelConsump);
            ps.setInt(8, mileage);

            int result = ps.executeUpdate();

            if (result == 1) {
                done = true;
            }

        } catch (SQLException sqlex) {
            sqlex.printStackTrace();
        }

        return done;

    }//addNewCar

    
    /**
     * Method used to add a new user to the database
     * @param fName
     * @param lName
     * @param dob
     * @param address
     * @param city
     * @param postcode
     * @param phoneNum
     * @param email
     * @param pass
     * @param accLevel
     * @return 
     */
    public boolean addUser(String fName, String lName, Date dob, String address,
            String city, String postcode, String phoneNum,
            String email, String pass, int accLevel) {
        boolean done = false;
        try {
            setConnection();
            String query = "INSERT INTO tblUser (UserFname, UserLname, UserDOB, UserAddress, UserCity, UserPostcode, UserPhoneNo, UserEmail, UserPassword, AccessLevel) VALUES (?,?,?,?,?,?,?,?,?,?)";

            ps = conObj.prepareStatement(query);

            ps.setString(1, fName);
            ps.setString(2, lName);
            ps.setDate(3, dob);
            ps.setString(4, address);
            ps.setString(5, city);
            ps.setString(6, postcode);
            ps.setString(7, phoneNum);
            ps.setString(8, email);
            ps.setString(9, pass);
            ps.setInt(10, accLevel);

            int result = ps.executeUpdate();

            if (result == 1) {
                done = true;
            }

        } catch (SQLException sqlex) {
            sqlex.printStackTrace();
        }

        return done;

    }//addUser

    /**
     * Method used to load a result set for the user which is logging in
     * @param email
     * @param password
     * @return 
     */
    public static User loadUser(String email, String password) {
        User user = null;

        String strSQL = "SELECT * FROM tblUser where UserEmail = '"
                + email + "'" + "AND UserPassword = '" + password + "'";

        try {

            resultSet = stateObj.executeQuery(strSQL);
            String strFName = "";
            String strLName = "";
            Date strDOB = null;
            String strAddress = "";
            String strCity = "";
            String strPostcode = "";
            String strPhoneNo = "";
            String strEmail = "";
            String strPass = "";
            int strAccLevel = 0;
            int strUserID = 0;

            while (resultSet.next()) {

                strFName = resultSet.getString("UserFname");
                strLName = resultSet.getString("UserLname");
                strDOB = resultSet.getDate("UserDOB");
                strAddress = resultSet.getString("UserAddress");
                strCity = resultSet.getString("UserCity");
                strPostcode = resultSet.getString("UserPostcode");
                strPhoneNo = resultSet.getString("UserPhoneNo");
                strEmail = resultSet.getString("UserEmail");
                strPass = resultSet.getString("UserPassword");
                strAccLevel = resultSet.getInt("AccessLevel");
                strUserID = resultSet.getInt("UserID");

                if (strEmail != null) {
                    user = new User(strUserID, strFName, strLName, strDOB, strAddress, strCity, strPostcode, strPhoneNo, strEmail, strPass, strAccLevel);

                }

            }
        } catch (Exception ex) {
            System.out.println(ex);
            closeConnection();
        }

        return user;

    }//loadUser

    /**
     * Method used to update user details using the frMyAccount form
     * @param user1 
     */
    public static void saveDetails(User user1) {
        setConnection();

        try {
            String strSQL = "UPDATE tblUser SET "
                    + "UserFname = ?, UserLname = ?, UserAddress = ?, UserCity = ?, UserPostcode = ?, UserPhoneNo = ?, UserPassword = ?"
                    + "WHERE UserEmail = '" + user1.getEmail() + "'";

            PreparedStatement ps = conObj.prepareStatement(strSQL);

            ps.setString(1, user1.getfName());
            ps.setString(2, user1.getlName());
            ps.setString(3, user1.getAddress());
            ps.setString(4, user1.getCity());
            ps.setString(5, user1.getPostcode());
            ps.setString(6, user1.getPhoneNum());
            ps.setString(7, user1.getPass());

            ps.executeUpdate();

        } // end try
        catch (Exception ex) {
            System.out.println("Error Saving");
            System.out.println(ex.toString());
        } // end try catch

        closeConnection();

    }//SaveDetails
}
